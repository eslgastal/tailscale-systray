* User:
Add a nix flake to build the current package, based on the following default.nix file:

#+begin_src nix :tangle default.nix
{ lib
, buildGoModule
, fetchFromGitHub
, pkg-config
, gtk3
, libayatana-appindicator
}:
buildGoModule rec {
  pname = "tailscale-systray";
  version = "2022-10-19";

  src = fetchFromGitHub {
    owner = "mattn";
    repo = pname;
    rev = "e7f8893684e7b8779f34045ca90e5abe6df6056d";
    sha256 = "sha256-3kozp6jq0xGllxoK2lGCNUahy/FvXyq11vNSxfDehKE=";
  };

  vendorHash = "sha256-YJ74SeZAMS+dXyoPhPTJ3L+5uL5bF8gumhMOqfvmlms=";

  nativeBuildInputs = [ pkg-config ];
  buildInputs = [ gtk3 libayatana-appindicator ];

  proxyVendor = true;

  meta = with lib; {
    description = "Tailscale systray";
    homepage = "https://github.com/mattn/tailscale-systray";
    license = licenses.mit;
    maintainers = with maintainers; [ qbit ];
    mainProgram = "tailscale-systray";
  };
}
#+end_src
* User:
Implement a new submenu for enabling/disabling the use of an exit node.

Exit nodes are those nodes for which tailscale status --json has "ExitNodeOption" as "true"

#+begin_src json
"nodekey:xxx": {
    "ID": "xxx",
    "PublicKey": "nodekey:xxx",
    "HostName": "MyServer",
	  "ExitNodeOption": true,
	  "ExitNode": false,
	...
}
#+end_src

To enable the use of the exit node, I can use

tailscale set --exit-node MyServer

To disable all exit nodes, I can use

tailscale set --exit-node ""

To check which node is currently used as exit node, I need to check that "ExitNode": true on the tailscale status --json output for that node.
* User:
Implement a new menu option for enabling/disabling the use of Tailscale's DNS routing.

To enable:

tailscale set --accept-dns=true

To disable:

tailscale set --accept-dns=false

To check if it is enabled or disabled, run:

tailscale dns status

The output of the above command will be many lines. One of those lines starts with "Tailscale DNS: <status>" where <status> is either "enabled" or "disabled".

** v2
Use a more robust check in `getTailscaleDNSStatus`, by using substring matches. For example, you could use a regex to check if the line matches "^Tailscale DNS:[ ]+enabled".

* User:
Implement a new menu option for enabling/disabling the use of Tailscale's routes.

To enable:

tailscale set --accept-routes=true

To disable:

tailscale set --accept-routes=false

To check if it is enabled or disabled, run:

tailscale status --json

And check that the array at entry "Health" contains "Some peers are advertising routes but --accept-routes is false".

For example:

#+begin_src bash :results verbatim
tailscale status --json | jq '.Health'
#+end_src

#+RESULTS:
: [
:   "Tailscale can't reach the configured DNS servers. Internet connectivity may be affected.",
:   "Some peers are advertising routes but --accept-routes is false"
: ]

#+begin_src bash :results verbatim
tailscale status --json | jq '.Health[]' | grep -- "--accept-routes is false"
#+end_src

#+RESULTS:
: "Some peers are advertising routes but --accept-routes is false"


* User:
If either "Use Tailscale DNS" or "Use Tailscale Routes" is off, then change the app icon to on-with-warning.png (unless the ExitNode option is on, then the on-with-exit-node.png icon takes precedence).
